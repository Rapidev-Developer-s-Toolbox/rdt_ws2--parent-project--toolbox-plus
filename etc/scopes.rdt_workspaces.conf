
*   Here is where you define types. Those ending with a '-' are base types. BD- is always the base, but it can be extended, as below. From there you are free to add your 
*   own types, so long as conform to the style rules (2 chars, both caps, before the hyphen), they are named (the convention is to make the 2-char type identifier an 
*   abbrev. of the name), and they are anchored. This means that they are defined, using a base that is already defined with an ancestry id that is either already defined 
*   or else built in. The ancestry id is the part after the '-'. It consists of a single capital character (unless all caps are used. The idea is to give the devs an idea 
*   of when their projects are probably ready to break down into submodules...) The builtins are `P, S, C` which correspond to parent, self, and child. As mentioned, you 
*   can define your own, but you MUST extend one of the three that are builtin. In other words, every type will either be a Parent, a Self, or a child of a defined type, 
*   and will therefore relate to the BD. This is how paths are parsed. If you have the path for BD, and you know how all other paths relate, you have them all! Vioula!
*
*   A few notes: Here the base directory is the root folder. This does not neccassarily have to be the case, but it makes your config a lot easier to read. Also, notice how 
*   the bottom 2 lines of the section are indented 4 extra spaces (all whitespace indents are 4. the only exception is comments. In their case, all * plus all spaces must equal 4.) 
*   The last 2 ancestry ids (`-D` & `-E`) each extend `-C`. To signify extension, the id must be of the same id type (primary or ancestry), and it must be part of an indented 
*   list directly below the type that it is extending. Extending adds nothing but the new name (for the purpose of adding more meaning to the model in cases where your project path 
*   follow an abstraction scheme.), so there is no difference between extending a drawer and extending one of that drawer's extensions. For this reason, I would advise not to go 
*   over a single layer of nesting. You will likely slow down the runtime, and you will gain nothing. This section is called the `key map`. It starts at the line `[[[ KEY ]]]` 
*   and continues until the next section (see details below.)  

[[[ KEY ]]]

    BD-#    BASEDIR    0
    WS-#    workspace    WS-C
    TB-#    toolbox    BD-S  
    ##-P    PARENT
    ##-S    SELF
    ##-C    CHILD
        ##-D    drawer
        ##-E    envdir

[[[ ENV ]]]

    Base    BD-S    //home/ntolb/CODING_PROJECTS/C_workspaces/rdt_workspaces/
        WS1    WS-S    //c-rapidev_ws1/ 
        WS2    WS-S    //c-rapidev_ws2/ [
            Toolbox    TB-S    //c-rapidev_ws2/dev-tool-box 
            Containster    TB-D    //drwr--containster-tools
            Logging-chain    TB-D    //drwr--logging-chain--tools
            Projectifier    TB-D    //drwr--projectifier-tools
            SUPERuser    TB-D    //drwr--SUPERuser-tools
            Arc-welder    TB-D    //drwr-arc-archiver-tools
            Pipewrench    TB-D    //drwr-cicd-pipewrench-tools
            Codecomp    TB-D    //drwr-code-comp-tools
            Codemode    TB-D    //drwr-codemode-tools
            Config-saw    TB-D    //drwr-config-saw-tools
            Conn-collect    TB-D    //drwr-connect-collect-tools
            EnVARment    TB-D    //drwr-enVARment-tools
            Pac-pack    TB-D    //drwr-pac-pack-tools
            Usrspace     TB-D    //drwr-usrspace-tools
            Utility-belt     TB-D    //support-drwr-utility-belt ]
            Lib    WS-E    //lib
            Bin    WS-E    //bin
            Etc    WS-E    //etc
        WS3    WS    c-rapidev_ws3/
        WS4    WS    c-rapidev_ws4/    

**  The line that's marked `[[[ ENV ]]]` above marks the beginning of the `environment map`. It continues until the end of the file. Notice the indentations. We could have left them 
    out, but this file serves a dual purpose. It maps the environment for your source code, and it also maps it for your team. The indentation serves the second purpose. If path node 
    B is an extension of path A, then A/B is either on the full path of B, or if A is the BASEDIR, it is the full path of B. To get any node's path, you just follow it up the 
    indentation tree ot the "oldest" relative node (BASEDIR or an extension thereof.) Oh yeah, line comments are as above, and block comments are as written here. All comments must 
**  be on their own line(s).
